local shell = require("shell")
local fs = require("filesystem")
local width = require("term").getViewport()

local cp, reason = loadfile(shell.resolve("cp", "lua"), "bt", _G)
assert(cp, reason)

local function loadData(path)
  local file = fs.open(path)
  local data = file:read(math.huge)
  file:close()
  local load = load("return " .. data)
  return load and load()
end

local install_target = fs.concat(install.to, install.root)
local cp_args =
{
  "-vrx" .. (install.update and "ui" or ""),
  fs.concat(install.from, install.fromDir) .. "/.",
  install_target
}

--Install the base OS
print(
  string.rep("-", width) ..
  "\nInstalling base OS...\n" ..
  string.rep("-", width)
)
do
  local ok, ec = pcall(cp, table.unpack(cp_args))
  assert(ok, ec)
end

--Install required library files from OpenOS or other specified files
print(
  string.rep("-", width) ..
  "\nInstalling additional libraries/files...\n" ..
  string.rep("-", width)
)
do
  local libraries = loadData(install.from .. ".libraries")

  local path = {
    ["old"] = shell.getPath(),
    ["/lib"] = string.gsub(package.path .. ";", "%?.-;", ":")
  }
  path["/lib/core"] = string.gsub(path["/lib"], "lib/?", "lib/core")
  setmetatable(path, {__index = function (table, key) return key end})

  for dir, library_files in pairs(libraries) do
    shell.setPath(path[dir])
    for _, library in pairs(library_files) do
      cp_args[2] = shell.resolve(library, "lua")
      if not cp_args[2] then
        error(
          "\n" ..
          library .. ".lua expected in one of the following directories:\n\t"
          .. string.gsub(path[dir], ":", "\n\t") .. "\n"
        )
      end
      cp_args[3] = fs.concat(install_target, dir)

      local ok, ec = pcall(cp, table.unpack(cp_args))
      assert(ok, ec)
    end
  end
  shell.setPath(path.old)
end

--remove installation files
print(
  string.rep("-", width) ..
  "\nRemoving installation files...\n" ..
  string.rep("-", width)
)
do
  local install_files = {".install", ".prop", ".libraries"}
  for _, file in pairs(install_files) do
    local path = fs.concat(install_target, file)
    fs.remove(path)
    print("removed '" .. path .. "'")
  end
end

print(string.rep("-", width))

--[[
Handle .prop file since currently install only recognizes prop files at a
device's root, this will override any install options, so it'd be best to
re-work after OC 1.7.3 when this is expected to change.
]]--
do
  local prop = loadData(install.from .. ".prop")
  if not prop then return end
  local device = fs.get(install.to)

  if prop.setlabel then
    pcall(device.setLabel, prop.label)
  end

  if prop.setboot then
    local address = device.address
    if computer.setBootAddress(address) then
      print("Boot address set to " .. address)
    end
  end

  if prop.reboot then
    io.write("Reboot now? [Y/n] ")
    if ((io.read() or "n").."y"):match("^%s*[Yy]") then
      print("\nRebooting now!\n")
      computer.shutdown(true)
    end
  end
end

print("Installation complete!")
